Resolvemos el juego lights out para un tablero 2x2, antes de meternos con el caso de 3x3

Enlace al canal de youtube: https://youtu.be/cLubGeLoDto
Enlace a Twitch: No hay

#c√≥digo
%matplotlib inline
# Importing standard Qiskit libraries and configuring account
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, IBMQ, BasicAer
from qiskit.compiler import transpile, assemble
from qiskit.tools.jupyter import *
from qiskit.visualization import *
import numpy as np
# Loading your IBM Q account(s)
provider = IBMQ.load_account()

q_push = QuantumRegister(4)
q_state = QuantumRegister(4)
aux = QuantumRegister(3)
aux2 = QuantumRegister(2)
c = ClassicalRegister(5)
qc = QuantumCircuit(q_push,q_state,aux,aux2,c)
mode = 'basic'
#  0 1  o 
#  2 3  o o

#init
qc.h(q_push[:])
qc.x(q_state[0])
qc.x(q_state[2])
#oracle
N = len(q_push)
for i in range(N):
    for j in range(N):
        if j!=N-1-i:
            qc.cx(q_push[i],q_state[j])
#             print(i,j)
qc.barrier()
qc.x(aux[0])
for i in range(N):
    qc.x(q_state[i])
qc.h(aux[0])
qc.mct(q_state[:],aux[0],aux[1:3], mode = mode)
qc.h(aux[0])
for i in range(N):
    qc.x(q_state[i])
qc.barrier()
for i in range(N-1,-1,-1):
    for j in range(N-1,-1,-1):
        if j!=N-1-i:
            qc.cx(q_push[i],q_state[j])
qc.barrier()            
#grover
qc.h(q_push[:])
qc.x(q_push[:])
qc.h(q_push[len(q_push)-1])
qc.mct(q_push[0:len(q_push)-1], q_push[len(q_push)-1], aux2[:], mode=mode)
qc.h(q_push[len(q_push)-1])
qc.x(q_push[:])
qc.h(q_push[:])
qc.barrier()
for i in range(N):
    qc.measure(q_push[i],c[i+1])
    

qc.draw(output='mpl')
# qc = qc.reverse_bits()

# backend = BasicAer.get_backend('qasm_simulator')
# shots = 1024
# results = execute(qc, backend=backend, shots=shots).result()
# answer = results.get_counts()
# print(answer)
# plot_histogram(answer)
