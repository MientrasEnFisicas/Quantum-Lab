IBM Quantum Challenge 2. Seguimos con el full adder, comprobando los inputs

Enlace al canal de youtube: https://youtu.be/NAu_szePz7w
Enlace a Twitch parte 1: https://www.twitch.tv/videos/807718078
Enlace a Twitch parte 2: https://www.twitch.tv/videos/807720713

#CÃ³digo:
n = 2
for i in range(0,n):
    A = 0
    if i == 1:
        A = 1
        qc.x(q[0])
    for j in range (0,n):
        B = 0
        if j == 1:
            B = 1
            qc.x(q[1])
        for k in range(0,n):
            Cin = 0
            if k == 1:
                Cin = 1
                qc.x(q[2])
# Estado de entrada
# qc.x(q[0])
# qc.x(q[2])
            #primer half adder
            #XOR
            qc.cx(q[0], q[3])
            qc.cx(q[1], q[3])
            #AND
            qc.ccx(q[0], q[1], q[4])
            #segundo half adder
            #XOR
            qc.cx(q[2], q[5])
            qc.cx(q[3], q[5])
            #AND
            qc.ccx(q[2], q[3], q[6])
            qc.barrier()

            #OR the carries
            qc.cx(q[4], q[7])
            qc.cx(q[6], q[7])
            qc.ccx(q[4], q[6], q[7])


            qc.measure(q[5],c[0])
            qc.measure(q[7],c[1])

#           qc.draw(output='mpl')
            #execute the circuit by qasm_simulator
            backend = Aer.get_backend('qasm_simulator')
            job = execute(qc, backend, shots=1000)
            result = job.result()
            count =result.get_counts()
            print( 'A = {}, B = {}, Cin = {}, {}'.format(A, B, Cin, list(count)))
#             print(i, j, k)

# # # Estado de entrada
# qc.x(q[0])
# qc.x(q[2])
# #primer half adder
# #XOR
# qc.cx(q[1], q[3])
# qc.cx(q[0], q[3])
# # qc.barrier()
# #AND
# qc.ccx(q[0], q[1], q[4])
# # qc.barrier()

# #segundo half adder
# #XOR
# qc.cx(q[3], q[5])
# qc.cx(q[2], q[5])
# #AND
# qc.ccx(q[2], q[3], q[6])
# # qc.barrier()

# #OR the carries
# qc.cx(q[4], q[7])
# qc.cx(q[6], q[7])
# qc.ccx(q[4], q[6], q[7])

# qc.measure(q[5],c[0])
# qc.measure(q[7],c[1])
