IBM Quantum Challenge 1: Primer ejercicio del IBM Quanutm challenge. Existe un problema y es que los outputsno salen bien, se debe a que el circuito no se reinicia en cada 
iteración, se resolverá en proçximos directos

Enlace al canal de youtube: https://youtu.be/HgongQcEUSs
Enlace a Twitch: https://www.twitch.tv/videos/807702936


Enlace al canal de youtube:https://youtu.be/HgongQcEUSs
Enlace a Twitch: https://www.twitch.tv/videos/807702936
Código: 
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from qiskit import IBMQ, Aer, execute

##### build your quantum circuit here

#Define registers and a quantum circuit
q = QuantumRegister(8)
c = ClassicalRegister(2)
qc = QuantumCircuit(q,c)

#q[0]= A, q[1]=B, q[3]=A xor B, q[2] = Cin, q[4] = S (A xor B xor Cin) q[5]= A and B q[6]= (A xor B) and Cin, q[7] = Cout

# #primer intento
# n = 2
# for i in range(0,n):
#     A = 0
#     if i == 1:
#         A = 1
#         qc.x(q[0])
#     for j in range (0,n):
#         B = 0
#         if j == 1:
#             B = 1
#             qc.x(q[1])
#         for k in range(0,n):
#             Cin = 0
#             if k == 1:
#                 Cin = 1
#                 qc.x(q[3])
                
#             qc.cx(q[0],q[3])
#             qc.cx(q[1],q[3])
#             qc.ccx(q[0],q[1],q[5])
#             qc.cx(q[3],q[4])
#             qc.cx(q[2],q[4])
#             qc.ccx(q[3],q[2],q[6])
#             qc.cx(q[5],q[7])
#             qc.cx(q[6],q[7])
#             qc.ccx(q[5],q[6],q[7])
#             qc.measure(q[4],c[0])
#             qc.measure(q[7],c[1])
#             qc.draw(output='mpl')
#             # execute the circuit by qasm_simulator
#             backend = Aer.get_backend('qasm_simulator')
#             job = execute(qc, backend, shots=1000)
#             result = job.result()
#             count =result.get_counts()
#             print( 'A = {}, B = {}, Cin = {}, sum = {}, Cout = {}'.format(A, B, Cin, list(count)[0][1], list(count)[0][0]))


