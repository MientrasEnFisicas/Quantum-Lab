Durante el octavo episodio de Quantum Lab exploramos el algoritmo de Simon. Fue el primer algoritmo en demostrar ventaja exponencial sobre el algoritmo clásico.
Este algoritmo es similar al the Deustch-Jozsa, aunque hay algunas diferencias significativas.
Por ejemplo, se usan n qubits objetivo, en lugar de uno. Otra diferencia es que estos qubits se miden tras ejecutar el oráculo, en lugar de descartarse.
Una dificultad que encontramos al comprender cómo funciona el algoritmo es el estado del sistema tras medir los n qubits objetivo. ¿Por qué el estado del sistema
se queda en superposición? (Paso 4 Qiskit textbook: https://qiskit.org/textbook/ch-algorithms/simon.html)

Un apunte sobre la implementación del código. En este ejemplo el oráculo viene contruído ya en qiskit, incluída las medidas del los qubits objetivo

Directo en Twitch: https://www.twitch.tv/videos/777502546
Vídeo en youtube: https://youtu.be/iDSOhPnRfHk

#Código
%matplotlib inline
# Importing standard Qiskit libraries and configuring account
from qiskit import QuantumCircuit, execute, Aer, IBMQ
from qiskit.compiler import transpile, assemble
from qiskit.tools.jupyter import *
from qiskit.visualization import *
# Loading your IBM Q account(s)
provider = IBMQ.load_account()

# import basic plot tools
from qiskit.visualization import plot_histogram
from qiskit_textbook.tools import simon_oracle



b = '110'
n = len(b)
simon_circuit = QuantumCircuit(n*2, n)

# for i in range(n): #Alternativa para aplicar hadammard a todos los registros
#     simon_circuit.h(i)

simon_circuit.h(range(n))   
simon_circuit.barrier()
simon_circuit += simon_oracle(b)
simon_circuit.barrier()
simon_circuit.h(range(n))  
simon_circuit.measure(range(n),range(n))

simon_circuit.draw() 
# backend = Aer.get_backend('statevector_simulator')
# print(execute(simon_circuit,backend = backend).result().get_statevector())

# use local simulator
backend = Aer.get_backend('qasm_simulator')
shots = 1024
results = execute(simon_circuit, backend=backend, shots=shots).result()
counts = results.get_counts()
plot_histogram(counts)


